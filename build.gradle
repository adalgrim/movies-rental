buildscript {
	ext {
		springBootVersion = '1.4.0.RELEASE'
	}
	repositories {
		maven {
			url "https://plugins.gradle.org/m2"
		}
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.0.1")
	}
}

apply plugin: 'org.sonarqube'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'

jar {
	baseName = 'movie-rental'
	version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}

ext {
    generatedMapperSourcesDir = "${buildDir}/generated-src/mapstruct/main"
}

configurations {
    mapstruct
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-jdbc')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-thymeleaf')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.mapstruct:mapstruct-jdk8:1.1.0.Beta2')
    compile("com.fasterxml.jackson.core:jackson-databind")
    compile("org.springframework:spring-web")
    runtime('com.h2database:h2')
	runtime('mysql:mysql-connector-java')
	testCompile('org.assertj:assertj-core:3.5.2');
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.testng:testng:6.9.10')
	testCompile('org.powermock:powermock-api-mockito:1.6.5')
    mapstruct('org.mapstruct:mapstruct-processor:1.1.0.Beta2')
}

sourceSets.main {
    ext.originalJavaSrcDirs = java.srcDirs
    java.srcDir "${generatedMapperSourcesDir}"
}

task generateMainMapperClasses(type: JavaCompile) {
    //class output dir, required by JavaCompile
    ext.aptDumpDir = file("${buildDir}/tmp/apt/mapstruct")
    destinationDir = aptDumpDir

    classpath = compileJava.classpath + configurations.mapstruct
    source = sourceSets.main.originalJavaSrcDirs
    ext.sourceDestDir = file("$generatedMapperSourcesDir")

    options.define(
            compilerArgs: [
                    '-nowarn',
                    '-proc:only',
                    '-encoding', 'UTF-8',
                    '-processor', 'org.mapstruct.ap.MappingProcessor',
                    '-s', sourceDestDir.absolutePath,
                    '-source', '1.8',
                    '-target', '1.8',
            ]
    );

    inputs.dir source
    outputs.dir generatedMapperSourcesDir;
    doFirst {
        sourceDestDir.mkdirs()
    }
    doLast {
        aptDumpDir.delete()
    }
}

compileJava.dependsOn generateMainMapperClasses

test {
	useTestNG()

	testLogging.showStandardStreams = true

	// listen to standard out and standard error of the test JVM(s)
	onOutput { descriptor, event ->
		logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
	}
}