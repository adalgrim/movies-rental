buildscript {
	ext {
		springBootVersion = '1.4.0.RELEASE'
	}
	repositories {
		maven {
			url "https://plugins.gradle.org/m2"
		}
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.0.1")
	}
}

apply plugin: 'org.sonarqube'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'

jar {
	baseName = 'movie-rental'
	version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-jdbc')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-thymeleaf')
    compile('org.springframework.boot:spring-boot-starter-web')
	compile('fr.xebia.extras:selma:0.15')
    runtime('com.h2database:h2')
	runtime('mysql:mysql-connector-java')
	testCompile('org.assertj:assertj-core:3.5.2');
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.testng:testng:6.9.10')
	testCompile('org.powermock:powermock-api-mockito:1.6.5')
}

test {
	useTestNG()

	testLogging.showStandardStreams = true

	// listen to standard out and standard error of the test JVM(s)
	onOutput { descriptor, event ->
		logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
	}
}